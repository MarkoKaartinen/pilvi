services:
  postgres:
    image: ${POSTGRES_IMAGE_TAG}
    volumes:
      - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    networks:
      - nextcloud-network
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${DB_NAME}", "-U", "${DB_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    labels:
      - "glance.parent=nextcloud"
      - "glance.name=Database"

  redis:
    image: ${REDIS_IMAGE_TAG}
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    volumes:
      - ${REDIS_DATA_LOCATION}:/data
    networks:
      - nextcloud-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    labels:
      - "glance.parent=nextcloud"
      - "glance.name=Redis"

  nextcloud:
    image: ${IMAGE_TAG}
    volumes:
      - ${DATA_LOCATION}:/var/www/html
      - ${UPLOADED_DATA_LOCATION}:/var/www/uploads
    environment:
      TZ: ${TIMEZONE}
      POSTGRES_HOST: postgres
      DB_PORT: 5432
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_HOST_PORT: 6379
      REDIS_HOST_PASSWORD: ${REDIS_PASSWORD}
      NEXTCLOUD_ADMIN_USER: ${ADMIN_USERNAME}
      NEXTCLOUD_ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      NEXTCLOUD_TRUSTED_DOMAINS: ${HOSTNAME}
      NEXTCLOUD_DATA_DIR: /var/www/uploads
      OVERWRITECLIURL: ${URL}
      OVERWRITEPROTOCOL: https
      OVERWRITEHOST: ${HOSTNAME}
      TRUSTED_PROXIES: 172.16.0.0/12 192.168.0.0/16 10.0.0.0/8 fc00::/7 fe80::/10 2001:db8::/32
    networks:
      - nextcloud-network
      - traefik-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    labels:
      - "glance.name=Tiedostot"
      - "glance.icon=di:nextcloud"
      - "glance.url=https://${HOSTNAME}"
      - "glance.id=nextcloud"
      # Enable Traefik for this container
      - "traefik.enable=true"
      # Match incoming requests on the specific hostname for Nextcloud
      - "traefik.http.routers.nextcloud.rule=Host(`${HOSTNAME}`)"
      # Assign the router to a named Traefik service
      - "traefik.http.routers.nextcloud.service=nextcloud"
      # Use the 'websecure' (HTTPS) entry point
      - "traefik.http.routers.nextcloud.entrypoints=websecure"
      # Define the internal container port for routing
      - "traefik.http.services.nextcloud.loadbalancer.server.port=80"
      # Enable TLS on this router
      - "traefik.http.routers.nextcloud.tls=true"
      # Use Let's Encrypt for certificate management
      - "traefik.http.routers.nextcloud.tls.certresolver=letsencrypt"
      # Pass the original Host header to the container
      - "traefik.http.services.nextcloud.loadbalancer.passhostheader=true"
      # Apply middlewares for security headers and compression
      - "traefik.http.routers.nextcloud.middlewares=nextcloud-redirectregex1,nextcloud-redirectregex2,compresstraefik,nextcloud-securityheaders"
      # Define settings for the compression middleware
      - "traefik.http.middlewares.compresstraefik.compress=true"
      # Settings for the first redirect regex middleware
      - "traefik.http.middlewares.nextcloud-redirectregex1.redirectregex.permanent=true"
      - "traefik.http.middlewares.nextcloud-redirectregex1.redirectregex.regex=https?://([^/]*)/.well-known/(card|cal)dav"
      - "traefik.http.middlewares.nextcloud-redirectregex1.redirectregex.replacement=https://$${1}/remote.php/dav/"
      # Settings for the second redirect regex middleware
      - "traefik.http.middlewares.nextcloud-redirectregex2.redirectregex.permanent=true"
      - "traefik.http.middlewares.nextcloud-redirectregex2.redirectregex.regex=https?://([^/]*)(/.well-known[^#]*)"
      - "traefik.http.middlewares.nextcloud-redirectregex2.redirectregex.replacement=https://$${1}/index.php$${2}"
      # Security headers settings specifically for Nextcloud
      - "traefik.http.middlewares.nextcloud-securityheaders.headers.stsSeconds=15552000"
      - "traefik.http.middlewares.nextcloud-securityheaders.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.nextcloud-securityheaders.headers.stsPreload=true"
      # HTTP -> HTTPS redirect middleware
      - "traefik.http.routers.nextcloud-http.rule=Host(`${HOSTNAME}`)"
      - "traefik.http.routers.nextcloud-http.entrypoints=web"
      - "traefik.http.routers.nextcloud-http.middlewares=redirect-to-https"
      # Specify which Docker network Traefik should use for routing
      - "traefik.docker.network=traefik-network"

    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  nextcloud-cron:
    image: ${IMAGE_TAG}
    entrypoint: /cron.sh
    labels:
      - "glance.parent=nextcloud"
      - "glance.name=Cron"
    volumes:
      - ${DATA_LOCATION}:/var/www/html
    networks:
      - nextcloud-network

networks:
  nextcloud-network:
    external: true
  traefik-network:
    external: true